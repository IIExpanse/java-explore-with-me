CREATE TABLE IF NOT EXISTS "users"
(
    "user_id"   BIGINT GENERATED BY DEFAULT AS IDENTITY,
    "email"     VARCHAR NOT NULL,
    "user_name" VARCHAR NOT NULL,
    CONSTRAINT pk_user PRIMARY KEY ("user_id"),
    CONSTRAINT uq_user_email UNIQUE ("email"),
    CONSTRAINT email_not_blank CHECK (LENGTH("email") > 0),
    CONSTRAINT user_name_not_blank CHECK (LENGTH("user_name") > 0)
);

CREATE TABLE IF NOT EXISTS "categories"
(
    "category_id"   BIGINT GENERATED BY DEFAULT AS IDENTITY,
    "category_name" VARCHAR NOT NULL,
    CONSTRAINT pk_category_id PRIMARY KEY ("category_id"),
    CONSTRAINT category_name_not_blank CHECK (LENGTH("category_name") > 0),
    CONSTRAINT uq_category_name UNIQUE ("category_name")
);

CREATE TABLE IF NOT EXISTS "events"
(
    "event_id"            BIGINT GENERATED BY DEFAULT AS IDENTITY,
    "annotation"          VARCHAR          NOT NULL,
    "event_category"      BIGINT           NOT NULL,
    "created_on"          TIMESTAMP        NOT NULL,
    "description"         VARCHAR          NOT NULL,
    "event_date"          TIMESTAMP        NOT NULL,
    "initiator"           BIGINT           NOT NULL,
    "lat"                 DOUBLE PRECISION NOT NULL,
    "lon"                 DOUBLE PRECISION NOT NULL,
    "paid"                BOOLEAN          NULL,
    "participation_limit" INT              NOT NULL,
    "published_on"        TIMESTAMP        NULL,
    "request_moderation"  BOOLEAN          NULL,
    "state"               VARCHAR          NOT NULL,
    "title"               VARCHAR          NOT NULL,
    CONSTRAINT pk_event PRIMARY KEY ("event_id"),
    CONSTRAINT fk_event_category FOREIGN KEY ("event_category") REFERENCES "categories" ("category_id") ON UPDATE CASCADE,
    CONSTRAINT fk_event_by_user FOREIGN KEY ("initiator") REFERENCES "users" ("user_id") ON UPDATE CASCADE,
    CONSTRAINT annotation_not_blank CHECK (LENGTH("annotation") > 0),
    CONSTRAINT description_not_blank CHECK (LENGTH("description") > 0),
    CONSTRAINT event_title_not_blank CHECK (LENGTH("title") > 0),
    CONSTRAINT created_before_publishing CHECK ("created_on" < "published_on"),
    CONSTRAINT in_event_state_enum CHECK ("state" IN ('PENDING', 'PUBLISHED', 'CANCELED', 'REVIEWED'))
);

CREATE TABLE IF NOT EXISTS "participation_requests"
(
    "request_id" BIGINT GENERATED BY DEFAULT AS IDENTITY,
    "created"    TIMESTAMP NOT NULL,
    "event"      BIGINT    NOT NULL,
    "requester"  BIGINT    NOT NULL,
    "status"     VARCHAR   NOT NULL,
    CONSTRAINT pk_request PRIMARY KEY ("request_id"),
    CONSTRAINT fk_request_for_event FOREIGN KEY ("event") REFERENCES "events" ("event_id") ON UPDATE CASCADE,
    CONSTRAINT fk_request_by_user FOREIGN KEY ("requester") REFERENCES "users" ("user_id") ON UPDATE CASCADE,
    CONSTRAINT in_request_status_enum CHECK ("status" IN ('PENDING', 'CONFIRMED', 'REJECTED', 'CANCELED'))
);

CREATE TABLE IF NOT EXISTS "compilations"
(
    "compilation_id" BIGINT GENERATED BY DEFAULT AS IDENTITY,
    "pinned"         BOOLEAN NOT NULL,
    "title"          VARCHAR NOT NULL,
    CONSTRAINT pk_compilation PRIMARY KEY ("compilation_id"),
    CONSTRAINT compilation_title_not_blank CHECK (LENGTH("title") > 0)
);

CREATE TABLE IF NOT EXISTS "events_compilations"
(
    "ref_event"       BIGINT NOT NULL,
    "ref_compilation" BIGINT NOT NULL,
    CONSTRAINT fk_compilation_referenced_by_event FOREIGN KEY ("ref_event")
        REFERENCES "events" ("event_id") ON UPDATE CASCADE,
    CONSTRAINT fk_event_referenced_by_compilation FOREIGN KEY ("ref_compilation")
        REFERENCES "compilations" ("compilation_id") ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS "moderator_reviews"
(
    "review_id"      BIGINT GENERATED BY DEFAULT AS IDENTITY,
    "reviewer_name"  VARCHAR   NOT NULL,
    "text"           VARCHAR   NOT NULL,
    "created_on"     TIMESTAMP NOT NULL,
    "reviewed_event" BIGINT    NOT NULL,
    CONSTRAINT pk_review PRIMARY KEY ("review_id"),
    CONSTRAINT fk_reviewed_event FOREIGN KEY ("reviewed_event") REFERENCES "events" ("event_id") ON UPDATE CASCADE,
    CONSTRAINT reviewer_name_not_blank CHECK (LENGTH("reviewer_name") > 0),
    CONSTRAINT review_text_not_blank CHECK (LENGTH("text") > 0)
);